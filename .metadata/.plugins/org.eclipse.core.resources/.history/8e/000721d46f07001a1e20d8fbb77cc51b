package com.rxiu.gateway.core.filter;

import com.google.common.util.concurrent.RateLimiter;
import com.rxiu.gateway.core.FilterOrder;
import com.rxiu.gateway.core.RateLimitProperties;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import javax.servlet.http.HttpServletRequest;

/**
 * @author rxiu
 * @date 2019/4/3
 */
public class RateLimiterFilter extends AbstractPreZuulFilter {

    private static final Logger LOGGER = LoggerFactory.getLogger(RateLimiterFilter.class);
    @Autowired
    private RateLimitProperties properties;
    
    /**
     * 每秒允许处理的量是5
     */
    RateLimiter rateLimiter = RateLimiter.create(1);
    
    public RateLimiterFilter() {
		this.rateLimiter = rateLimiter.create(properties.getLimit());
	}

	@Override
    public int filterOrder() {
        return FilterOrder.RATE_LIMITER_ORDER;
    }

    @Override
    public Object doRun() {
        HttpServletRequest request = context.getRequest();
        String url = request.getRequestURI();
        System.out.println("进入限流流程："+url);
        if (rateLimiter.tryAcquire()) {
            return success();
        } else {
            LOGGER.info("rate limit:{}", url);
            return fail(String.format("rate limit:{}", url));
        }
    }
}
