package com.rxiu.gateway.core;

import static java.util.concurrent.TimeUnit.MINUTES;

import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.apache.commons.lang3.StringUtils;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.cloud.context.config.annotation.RefreshScope;
import org.springframework.cloud.netflix.zuul.filters.Route;

import com.google.common.collect.Lists;
import com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.config.RateLimitUtils;
import com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.config.properties.AllArgsConstructor;
import com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.config.properties.Data;
import com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.config.properties.NoArgsConstructor;
import com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.config.properties.RateLimitType;
import com.marcosbarbero.cloud.autoconfigure.zuul.ratelimit.config.properties.RateLimitProperties.Policy.MatchType;
@RefreshScope
@ConfigurationProperties(RateLimitProperties.PREFIX)
public class RateLimitProperties {
	
	public static final String PREFIX = "zuul.ratelimit";
	
	
	
	 @Data
	    @NoArgsConstructor
	    public static class Policy {

	        @NotNull
	        private Long refreshInterval = MINUTES.toSeconds(1L);

	        private Long limit;

	        private Long quota;

	        @Valid
	        @NotNull
	        private List<MatchType> type = Lists.newArrayList();

	        @Data
	        @NoArgsConstructor
	        @AllArgsConstructor
	        public static class MatchType {

	            @Valid
	            @NotNull
	            private RateLimitType type;
	            private String matcher;

	            public boolean apply(HttpServletRequest request, Route route, RateLimitUtils rateLimitUtils) {
	                return StringUtils.isEmpty(matcher) || type.apply(request, route, rateLimitUtils, matcher);
	            }

	            public String key(HttpServletRequest request, Route route, RateLimitUtils rateLimitUtils) {
	                return type.key(request, route, rateLimitUtils) +
	                    (StringUtils.isEmpty(matcher) ? StringUtils.EMPTY : (":" + matcher));
	            }
	        }
	    }
	

}
